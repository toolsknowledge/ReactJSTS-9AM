************************************************************************
Step 1.
    upload images to cloud server   (AWS)  (S3)

    images
    ======
    1) https://ecommerce9am.s3.ap-south-1.amazonaws.com/p1.jpg
    2) https://ecommerce9am.s3.ap-south-1.amazonaws.com/p2.jpg
    3) https://ecommerce9am.s3.ap-south-1.amazonaws.com/p3.jpg
    4) https://ecommerce9am.s3.ap-south-1.amazonaws.com/p4.jpg
    5) https://ecommerce9am.s3.ap-south-1.amazonaws.com/p5.jpg
    6) https://ecommerce9am.s3.ap-south-1.amazonaws.com/p6.jpg

    logos
    =====
    https://ecommerce9am.s3.ap-south-1.amazonaws.com/logo1.png
    https://ecommerce9am.s3.ap-south-1.amazonaws.com/logo2.png


Step 2.
    make the database as ready

    Signup URL : https://account.mongodb.com/account/login


    database name : ecommerce9am
    collection name : products

    user : admin
    password : admin


    Connection URL : mongodb+srv://admin:admin@miniprojectdb.nzphu.mongodb.net/ecommerce9am?retryWrites=true&w=majority



Step 3.
    develop rest api (GET) by using nodejs


    => create the server directory

            Ex.
                ecommerce-project
                               server

    => switch to server directory


    => download node modules

            1) mongodb

            2) express

            3) cors

            4) body-parser


            - mongodb module, used to interact with the mongodb database.

            - express module, used to develop the rest services.

            - cors module, used to enable the ports communication.

            - body-parser module, used to receives the data from client application
            

            > yarn add mongodb express cors body-parser --save

    => develop GET Request

            server.js


    => start the server

            > node server

    => Test the Rest API By Using "Postman"

            > http://localhost:8080/api/products


step 4.
        create the react application

        > npx create-react-app front-end --template typescript

Step 5.
      switch to react application 

        > cd front-end


Step 6.
        download the react modules

        => redux    @types/redux


        => react-redux    @types/react-redux


        => redux-thunk    @types/redux-thunk

        => axios



        - we will maintain state manegement with the help of redux.

        - we will integrate state management to react application with the help of react-redux

        - we will moniter the actions by using redux-thunk

        - we will make asynchrnous calls by using axios


        > yarn add redux @types/redux react-redux @types/react-redux redux-thunk @types/redux-thunk axios --save



Step 7.
        implement the Redux Architecture

        create the modal based on server response
        =========================================
        front-end
                src
                  modal
                     Product.tsx


        - in general, we will create Modal by using interfaces  

        - finally "Product" modal object is ready.



        create the Action Types
        =======================  
        front-end
                src
                  types  
                     ProductActionTypes.tsx


        finally 3 actions are ready.

        1) ProductsLoading

        2) ProductsSuccess

        3) ProductsFail

        => ProductsActionTypes


        implement the actions
        =====================
        front-end   
                src
                  actions
                     ProductsAction.tsx


        implement the reducer
        =====================
        front-end
                src
                  reducer
                     ProductsReducer.tsx

        implement the store
        ===================
        index.tsx

DetailsScreen
=============
Step 1.
        implement the server

Step 2.
        make the modal ready

                - Already "Product" modal ready.

Step 3.
        create the Types

        ************************************************
        front-end
                 src
                   types
                       DetailsActionTypes.tsx
        ************************************************


Step 4.
        implement the actions


        ***************************************************************
        front-end
                src
                  actions
                        DetailsActions.tsx
        ***************************************************************


Step 5.
        implement the reducer

        ***************************************************************
        front-end
                src
                  reducer
                        DetailsReducer.tsx
        **************************************************************


Step 6.
        create the store


24-02-2021
==========
Design the Master Screen

App.tsx

















































          












































