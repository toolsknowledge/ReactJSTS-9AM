Components
==========

    - Simple TypeScript class or TypeScript function behaves like Component.

    - React Applications are Component Based Applications.

    - we can provide communication between one component to another component.

    - These components are Reusable Components.

    - Class Level Components are also called as Stateful Components.

    - Functional Level Components are also called as StateLess Components.

*****************************************
first-app
        src
          First.tsx

          index.tsx
        public
            index.html
*****************************************

                        ***** Multiple Components *****


 as a react developer, we can create more than one component


 **********************************************************************
 multiple-components
                   src
                     Header.tsx

                     Body.tsx

                     Footer.tsx

                     Main.tsx

                     index.tsx
**************************************************************************

                                          ****** Props ******

      - child "component" with receive the data from "parent" component by using props.

      - props is the predefined object


******************************************************************************
props-ex
       src
         Parent.tsx

         Child.tsx

         index.tsx
******************************************************************************






                            ***** Single Page Applications ******

Ex2.
  step 1.
      create the react project
          > npx create-react-app spa-demo2 --template typescript

  step 2.
      switch to react application
         > cd spa-demo2

  step 3.
      download the libraries.

      => react-router-dom

      => @types/react-router-dom

      => @material-ui/core

      => @material-ui/icons

      > yarn add react-router-dom @types/react-router-dom @material-ui/core @material-ui/icons --save

  step 4.
    implement the Dashboard

    *****************************************************
    spa-demo2
            src
              Laptops.tsx

              Mobiles.tsx

              Jeans.tsx

              Dashboard.tsx
    *****************************************************




  step 5.
    create the Login Component.


  **********************************************************
  spa-demo2
          src
            Login.tsx
  *********************************************************


Step 6.
  create the Main Component


  ********************************************************
  spa-demo2
         src
          Main.tsx
  ********************************************************






                                      ***** Rest API Calls *****

      => axios is the module, used to make the rest api calls.

Step 1.
    create the react application

        > npx create-react-app rest-ex --template typescript

        - where "rest-ex" is the name of the react application.


Step 2.
  switch to project

    > cd rest-ex

Step 3.
  download axios module

    > yarn add axios --save


Step 4.
  create the modal object based on rest api call

        => https://restcountries.eu/rest/v2/all

  ****************************************************
  rest-ex
        src
          modal
            Countries.ts
  ****************************************************

        - finally modal is ready with "Country" name



Step 5.
  create the Component.


******************************************************
rest-ex
       src
          components
               GetEx.tsx
******************************************************






                                          ***** POST Ex ******


    URL : http://test-routes.herokuapp.com/test/uppercase    (POST)











                                        **** Forms ****



1) create the react application

    > npx create-react-app forms-app-ex --template typescript


2) switch to react application

    > cd forms-app-ex

3) add material ui

  > yarn add @material-ui/core @material-ui/icons --save



*******************************
forms-app
       src
         controls
            RadioGroup.tsx


            Input.tsx
                - Finally reusable Input component ready  
                    props
                    =====
                      @name
                      @label
                      @value
                      @onChange
                      @error

              Controls.tsx
                - Contain Input component Entry

              UseForm.tsx   (Functional Level)
                  - Maintain the Reusable Code

              Form.tsx    (To Apply the CSS)

          Registration.tsx
********************************







































